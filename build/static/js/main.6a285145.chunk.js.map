{"version":3,"sources":["redux/contacts/contactsActions.js","redux/contacts/contactsConstants.js","redux/contacts/contactsReducers.js","redux/store.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelector.js","components/Form/Form.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["addContact","createAction","removeItem","filterItems","toggle","toggleLoader","setError","getContacts","items","createReducer","state","action","payload","filter","contact","id","hasNameInContacts","loader","error","combineReducers","configureStore","reducer","contacts","contactsReduser","url","contactsSelector","itemsSelector","filterSelector","FilteredItemsSelector","createSelector","filterValue","item","name","toLowerCase","includes","errorSelector","isNameSelector","isLoadingSelector","Form","number","changeValue","target","value","setState","hasContact","props","some","cont","handleSubmit","e","preventDefault","Date","now","this","onSubmit","className","type","placeholder","onChange","Component","mapDispatchToProps","dispatch","a","axios","post","res","console","log","data","connect","deleteContact","idContact","delete","get","useEffect","color","height","width","timeout","TransitionGroup","component","map","CSSTransition","key","classNames","onClick","App","isLoade","changeFilter","search","in","mountOnEnter","unmountOnExit","onEntered","length","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"yVAWaA,EAAaC,YCXP,iBDaNC,EAAaD,YCZJ,mBDcTE,EAAcF,YCbL,mBDeTG,EAASH,YCdA,mBDeTI,EAAeJ,YCdN,mBDeTK,EAAWL,YCdH,kBDeRM,EAAcN,YCdC,wBCKtBO,EAAQC,YAAc,IAAD,mBACxBT,GAAa,SAACU,EAAOC,GAAR,4BAAuBD,GAAvB,CAA8BC,EAAOC,aAD1B,cAExBV,GAAa,SAACQ,EAAOC,GAAR,OACZD,EAAMG,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOJ,EAAOC,cAHvB,cAIxBL,GAAc,SAACG,EAAOC,GAAR,OAAmBA,EAAOC,WAJhB,IAMrBC,EAASJ,YAAc,GAAD,eACzBN,GAAc,SAACO,EAAOC,GAAR,OAAmBA,EAAOC,YAErCI,EAAoBP,aAAc,EAAD,eACpCL,GAAS,SAACM,EAAOC,GAAR,OAAmBA,EAAOC,YAEhCK,EAASR,aAAc,EAAD,eACzBJ,GAAe,SAACK,EAAOC,GAAR,OAAmBA,EAAOC,YAEtCM,EAAQT,aAAc,EAAD,eACxBH,GAAW,SAACI,EAAOC,GAAR,OAAmBA,EAAOC,YAGzBO,cAAgB,CAC7BX,QACAK,SACAG,oBACAC,SACAC,UChCaE,cAAe,CAC5BC,QAAS,CACPC,SAAUC,K,2GCIRC,EAAM,iC,OCRCC,EAAmB,SAAAf,GAAK,OAAIA,EAAMY,UAClCI,EAAgB,SAAAhB,GAAK,OAAIe,EAAiBf,GAAOF,OACjDmB,EAAiB,SAAAjB,GAAK,OAAIe,EAAiBf,GAAOG,QAClDe,EAAwBC,YACnC,CAACH,EAAeC,IAChB,SAACnB,EAAOsB,GAAR,OACEA,EACItB,EAAMK,QAAO,SAAAkB,GACX,OAAOA,EAAKC,KAAKC,cAAcC,SAASJ,EAAYG,kBAEtDzB,KAEK2B,EAAgB,SAAAzB,GAAK,OAAIe,EAAiBf,GAAOQ,OACjDkB,EAAiB,SAAA1B,GAAK,OACjCe,EAAiBf,GAAOM,mBACbqB,EAAoB,SAAA3B,GAAK,OAAIe,EAAiBf,GAAOO,QCP5DqB,G,kNACJ5B,MAAQ,CACNsB,KAAM,GACNO,OAAQ,I,EAEVC,YAAc,YAAiB,IAAdC,EAAa,EAAbA,OACPC,EAAUD,EAAVC,MACAV,EAASS,EAATT,KACR,EAAKW,SAAL,eACGX,EAAOU,K,EAGZE,WAAa,SAAAZ,GAEX,OADqB,EAAKa,MAAlBvB,SACQwB,MAAK,SAAAC,GAAI,OAAIA,EAAKf,OAASA,M,EAG7CgB,aAAe,SAAAC,GACbA,EAAEC,iBADgB,MAEO,EAAKxC,MAAtBsB,EAFU,EAEVA,KAAMO,EAFI,EAEJA,OAERR,EAAO,CACXhB,GAAIoC,KAAKC,MACTpB,OACAO,UAEgB,EAAKK,WAAWb,EAAKC,MAErC,EAAKa,MAAMzC,QAAO,IAGpB,EAAKyC,MAAM7C,WAAW+B,GACtB,EAAKc,MAAMzC,QAAO,GAClB,EAAKuC,SAAS,CACZX,KAAM,GACNO,OAAQ,O,uDAGF,IAAD,EACkBc,KAAK3C,MAAtBsB,EADD,EACCA,KAAMO,EADP,EACOA,OACd,OACE,0BAAMe,SAAUD,KAAKL,aAAcO,UAAU,QAC3C,2BACEA,UAAU,YACVC,KAAK,OACLd,MAAOV,EACPA,KAAK,OACLyB,YAAY,YACZC,SAAUL,KAAKb,cACd,IACH,2BACEe,UAAU,YACVC,KAAK,QACLC,YAAY,cACZf,MAAOH,EACPP,KAAK,SACL0B,SAAUL,KAAKb,cACd,IACH,4BAAQe,UAAU,YAAlB,iBAAoD,S,GA1DzCI,cAsEbC,EAAqB,CACzB5D,WFtEiC,SAAA+B,GAAI,8CAAI,WAAM8B,GAAN,eAAAC,EAAA,sEAEvCD,EAASxD,GAAa,IAFiB,SAGrB0D,IAAMC,KAAKxC,EAAKO,GAHK,OAGjCkC,EAHiC,OAIvCC,QAAQC,IAAIF,GAEZJ,EAAS7D,EAAWiE,EAAIG,OANe,gDAQvC9D,EAAS,EAAD,IAR+B,yBAUvCuD,EAASxD,GAAa,IAViB,4EAAJ,uDEuErCD,UAEaiE,eAVS,SAAA3D,GACtB,MAAO,CACLY,SAAUI,EAAchB,GACxBM,kBAAmBoB,EAAe1B,MAOEkD,EAAzBS,CAA6C/B,G,QCtBtDsB,G,MAAqB,CACzBU,cHvCoC,SAAAC,GAAS,8CAAI,WAAMV,GAAN,SAAAC,EAAA,sEAE/CD,EAASxD,GAAa,IAFyB,SAG7B0D,IAAMS,OAAN,UAAgBhD,EAAhB,YAAuB+C,IAHM,cAI/CV,EAAS3D,EAAWqE,IAJ2B,gDAM/CjE,EAAS,EAAD,IANuC,yBAQ/CuD,EAASxD,GAAa,IARyB,4EAAJ,uDGwC7CE,YH7BkC,yDAAM,WAAMsD,GAAN,eAAAC,EAAA,sEAEtCD,EAASxD,GAAa,IAFgB,SAGpB0D,IAAMU,IAAIjD,GAHU,OAGhCyC,EAHgC,OAItCC,QAAQC,IAAIF,EAAIG,MAChBP,EAAStD,EAAY0D,EAAIG,OALa,gDAOtC9D,EAAS,EAAD,IAP8B,yBAStCuD,EAASxD,GAAa,IATgB,4EAAN,yDGgCrBgE,eAXS,SAAA3D,GACtB,MAAO,CACLY,SAAUM,EAAsBlB,GAChCO,OAAQoB,EAAkB3B,MAQUkD,EAAzBS,EArDK,SAAC,GAAsD,IAApD/C,EAAmD,EAAnDA,SAAUgD,EAAyC,EAAzCA,cAAe/D,EAA0B,EAA1BA,YAAaU,EAAa,EAAbA,OAM3D,OALAyD,qBAAU,WACRR,QAAQC,IAAI,UAEZ5D,MACC,IAED,oCACGU,GACC,kBAAC,IAAD,CACEsC,UAAU,SACVC,KAAK,YACLmB,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,OAGX7D,GACA,kBAAC8D,EAAA,EAAD,CAAiBC,UAAU,KAAKzB,UAAU,QACvCjC,EAAS2D,KAAI,YAA2B,IAAxBjD,EAAuB,EAAvBA,KAAMO,EAAiB,EAAjBA,OAAQxB,EAAS,EAATA,GAC7B,OACE,kBAACmE,EAAA,EAAD,CAAeC,IAAKpE,EAAIqE,WAAW,SAASN,QAAS,KACnD,wBAAIvB,UAAU,QACZ,uBAAGA,UAAU,aAAb,IAA2BvB,EAA3B,KACA,uBAAGuB,UAAU,cAAb,IAA4BhB,EAA5B,KACA,4BACE8C,QAAS,kBAAMf,EAAcvD,IAC7BwC,UAAU,YAFZ,eCpBZ+B,I,kNACJ5E,MAAQ,CACN6E,SAAS,G,EAEXC,aAAe,SAAAvC,GACb,EAAKJ,MAAM1C,YAAY8C,EAAER,OAAOC,Q,uDAGxB,IACA6C,EAAYlC,KAAK3C,MAAjB6E,QADD,EASHlC,KAAKR,MANPvB,EAHK,EAGLA,SACAN,EAJK,EAILA,kBACAZ,EALK,EAKLA,OACAqF,EANK,EAMLA,OACAvE,EAPK,EAOLA,MACAD,EARK,EAQLA,OAEF,OACE,6BACGA,GACC,kBAAC,IAAD,CACEsC,UAAU,SACVC,KAAK,YACLmB,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,OAGX7D,IAAWC,GACX,oCACE,kBAACgE,EAAA,EAAD,CACEE,WAAW,YACXN,QAAS,KACTY,GAAIH,EACJI,cAAY,GAEZ,6BACE,2CAGJ,kBAACT,EAAA,EAAD,CACEQ,GAAI1E,EACJoE,WAAW,QACXQ,eAAa,EACbd,QAAS,KACTe,UAAW,kBAAMzF,GAAO,KAExB,yBAAKmD,UAAU,iBACb,wBAAIA,UAAU,eAAd,gDAKJ,kBAAC,EAAD,MACA,kBAAC2B,EAAA,EAAD,CACEQ,GAAIpE,EAASwE,OAAS,EACtBF,eAAa,EACbR,WAAW,SACXN,QAAS,KAET,2BAAOvB,UAAU,cACf,qDACA,2BACEC,KAAK,OACLxB,KAAK,SACLU,MAAO+C,EACP/B,SAAUL,KAAKmC,kBAMzB,kBAAC,EAAD,W,GA1EU7B,cAyFZC,GAAqB,CACzB5D,aACAI,SACAD,eAGakE,gBAfS,SAAA3D,GACtB,MAAO,CACLY,SAAUI,EAAchB,GACxBM,kBAAmBoB,EAAe1B,GAClC+E,OAAQ9D,EAAejB,GACvBO,OAAQoB,EAAkB3B,GAC1BQ,MAAOiB,EAAczB,MASekD,GAAzBS,CAA6CiB,IC3G5DS,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.6a285145.chunk.js","sourcesContent":["import {\n  ADD,\n  REMOVE,\n  FILTER,\n  TOGGLE,\n  LOADER,\n  ERROR,\n  GET_CONTACTS,\n} from './contactsConstants';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction(ADD);\n\nexport const removeItem = createAction(REMOVE);\n\nexport const filterItems = createAction(FILTER);\n\nexport const toggle = createAction(TOGGLE);\nexport const toggleLoader = createAction(LOADER);\nexport const setError = createAction(ERROR);\nexport const getContacts = createAction(GET_CONTACTS);\n","export const ADD = 'contacnts/add';\nexport const REMOVE = 'contacts/romove';\nexport const FILTER = 'contacts/filter';\nexport const TOGGLE = 'contacts/toggle';\nexport const LOADER = 'contacts/loader'\nexport const ERROR = 'contacts/error'\nexport const GET_CONTACTS = 'contacts/getContacts'","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContact,\n  removeItem,\n  filterItems,\n  toggle,\n  toggleLoader,\n  setError,\n  getContacts,\n} from './contactsActions';\nconst items = createReducer([], {\n  [addContact]: (state, action) => [...state, action.payload],\n  [removeItem]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload),\n  [getContacts]: (state, action) => action.payload,\n});\nconst filter = createReducer('', {\n  [filterItems]: (state, action) => action.payload,\n});\nconst hasNameInContacts = createReducer(false, {\n  [toggle]: (state, action) => action.payload,\n});\nconst loader = createReducer(false, {\n  [toggleLoader]: (state, action) => action.payload,\n});\nconst error = createReducer(false, {\n  [setError]: (state, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  hasNameInContacts,\n  loader,\n  error,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReduser from './contacts/contactsReducers';\n\nexport default configureStore({\n  reducer: {\n    contacts: contactsReduser,\n  },\n});\n","import axios from 'axios';\nimport {\n  addContact,\n  removeItem,\n  toggleLoader,\n  setError,\n  getContacts,\n} from './contactsActions';\n\nconst url = 'http://localhost:9999/contacts';\nexport const addContactOperation = item => async dispatch => {\n  try {\n    dispatch(toggleLoader(true));\n    const res = await axios.post(url, item);\n    console.log(res);\n\n    dispatch(addContact(res.data));\n  } catch (error) {\n    setError(error);\n  } finally {\n    dispatch(toggleLoader(false));\n  }\n};\nexport const deleteContactOperation = idContact => async dispatch => {\n  try {\n    dispatch(toggleLoader(true));\n    const res = await axios.delete(`${url}/${idContact}`);\n    dispatch(removeItem(idContact));\n  } catch (error) {\n    setError(error);\n  } finally {\n    dispatch(toggleLoader(false));\n  }\n};\nexport const getContactsOperation = () => async dispatch => {\n  try {\n    dispatch(toggleLoader(true));\n    const res = await axios.get(url);\n    console.log(res.data);\n    dispatch(getContacts(res.data));\n  } catch (error) {\n    setError(error);\n  } finally {\n    dispatch(toggleLoader(false));\n  }\n};\n","import { createSelector } from 'reselect';\nexport const contactsSelector = state => state.contacts;\nexport const itemsSelector = state => contactsSelector(state).items;\nexport const filterSelector = state => contactsSelector(state).filter;\nexport const FilteredItemsSelector = createSelector(\n  [itemsSelector, filterSelector],\n  (items, filterValue) =>\n    filterValue\n      ? items.filter(item => {\n          return item.name.toLowerCase().includes(filterValue.toLowerCase());\n        })\n      : items,\n);\nexport const errorSelector = state => contactsSelector(state).error;\nexport const isNameSelector = state =>\n  contactsSelector(state).hasNameInContacts;\nexport const isLoadingSelector = state => contactsSelector(state).loader;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact, toggle } from '../../redux/contacts/contactsActions';\nimport { addContactOperation } from '../../redux/contacts/contactsOperations';\nimport {\n  itemsSelector,\n  isNameSelector,\n} from '../../redux/contacts/contactsSelector';\nimport './Form.css';\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  changeValue = ({ target }) => {\n    const { value } = target;\n    const { name } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n  hasContact = name => {\n    const { contacts } = this.props;\n    return contacts.some(cont => cont.name === name);\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    const item = {\n      id: Date.now(),\n      name,\n      number,\n    };\n    const hasNameIn = this.hasContact(item.name);\n    if (hasNameIn) {\n      this.props.toggle(true);\n      return;\n    }\n    this.props.addContact(item);\n    this.props.toggle(false);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form\">\n        <input\n          className=\"form-item\"\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"Your name\"\n          onChange={this.changeValue}\n        />{' '}\n        <input\n          className=\"form-item\"\n          type=\"phone\"\n          placeholder=\"333-333-333\"\n          value={number}\n          name=\"number\"\n          onChange={this.changeValue}\n        />{' '}\n        <button className=\"form-btn\"> Add contact </button>{' '}\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: itemsSelector(state),\n    hasNameInContacts: isNameSelector(state),\n  };\n};\nconst mapDispatchToProps = {\n  addContact: addContactOperation,\n  toggle,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Loader from 'react-loader-spinner';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport {\n  getContactsOperation,\n  deleteContactOperation,\n} from '../../redux/contacts/contactsOperations';\nimport {\n  FilteredItemsSelector,\n  isLoadingSelector,\n} from '../../redux/contacts/contactsSelector';\nimport './ContactList.css';\nconst ContactList = ({ contacts, deleteContact, getContacts, loader }) => {\n  useEffect(() => {\n    console.log('123123');\n\n    getContacts();\n  }, []);\n  return (\n    <>\n      {loader && (\n        <Loader\n          className=\"loader\"\n          type=\"ThreeDots\"\n          color=\"#ffc0cb\"\n          height={100}\n          width={100}\n          timeout={3000} //3 secs\n        />\n      )}\n      {!loader && (\n        <TransitionGroup component=\"ul\" className=\"list\">\n          {contacts.map(({ name, number, id }) => {\n            return (\n              <CSSTransition key={id} classNames=\"change\" timeout={250}>\n                <li className=\"item\">\n                  <p className=\"list-name\"> {name} </p>\n                  <p className=\"list-phone\"> {number} </p>\n                  <button\n                    onClick={() => deleteContact(id)}\n                    className=\"list-btn\"\n                  >\n                    X\n                  </button>\n                </li>\n              </CSSTransition>\n            );\n          })}\n        </TransitionGroup>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    contacts: FilteredItemsSelector(state),\n    loader: isLoadingSelector(state),\n  };\n};\nconst mapDispatchToProps = {\n  deleteContact: deleteContactOperation,\n  getContacts: getContactsOperation,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport Loader from 'react-loader-spinner';\nimport {\n  addContact,\n  toggle,\n  filterItems,\n} from './redux/contacts/contactsActions';\nimport Form from './components/Form/Form';\nimport ContactList from './components/ContactList/ContactList';\nimport './App.css';\nimport {\n  isLoadingSelector,\n  itemsSelector,\n  isNameSelector,\n  filterSelector,\n  errorSelector,\n} from './redux/contacts/contactsSelector';\nclass App extends Component {\n  state = {\n    isLoade: false,\n  };\n  changeFilter = e => {\n    this.props.filterItems(e.target.value);\n  };\n\n  render() {\n    const { isLoade } = this.state;\n    const {\n      contacts,\n      hasNameInContacts,\n      toggle,\n      search,\n      error,\n      loader,\n    } = this.props;\n    return (\n      <div>\n        {loader && (\n          <Loader\n            className=\"loader\"\n            type=\"ThreeDots\"\n            color=\"#ffc0cb\"\n            height={100}\n            width={100}\n            timeout={3000} //3 secs\n          />\n        )}\n        {!loader && !error && (\n          <>\n            <CSSTransition\n              classNames=\"phonebook\"\n              timeout={1500}\n              in={isLoade}\n              mountOnEnter\n            >\n              <div>\n                <h1>Phonebook</h1>\n              </div>\n            </CSSTransition>\n            <CSSTransition\n              in={hasNameInContacts}\n              classNames=\"alert\"\n              unmountOnExit\n              timeout={2500}\n              onEntered={() => toggle(false)}\n            >\n              <div className=\"alert-wrapper\">\n                <h1 className=\"alert-title\">\n                  This name is have already in contacts list\n                </h1>\n              </div>\n            </CSSTransition>\n            <Form />\n            <CSSTransition\n              in={contacts.length > 1}\n              unmountOnExit\n              classNames=\"search\"\n              timeout={250}\n            >\n              <label className=\"form-label\">\n                <p>Find contacts by name:</p>\n                <input\n                  type=\"text\"\n                  name=\"search\"\n                  value={search}\n                  onChange={this.changeFilter}\n                />\n              </label>\n            </CSSTransition>\n          </>\n        )}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: itemsSelector(state),\n    hasNameInContacts: isNameSelector(state),\n    search: filterSelector(state),\n    loader: isLoadingSelector(state),\n    error: errorSelector(state),\n  };\n};\nconst mapDispatchToProps = {\n  addContact,\n  toggle,\n  filterItems,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}